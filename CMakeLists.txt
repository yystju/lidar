CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

PROJECT(lidar)

set (LIDAR_VERSION_MAJOR 0)
set (LIDAR_VERSION_MINOR 1)

set(CMAKE_C_COMPILER "gcc-4.8")
set(CMAKE_CXX_COMPILER "g++-4.8")

SET (CMAKE_BUILD_TYPE "Debug")
SET (CMAKE_INSTALL_PREFIX "/opt/lidar")

#ADD_SUBDIRECTORY(../xsens/)

SET(CMAKE_C_FLAGS_DEBUG "$ENV{CFLAGS} -O0 -Wall -g -ggdb -std=c99 -Wno-implicit-function-declaration -Wno-pointer-sign")
SET(CMAKE_C_FLAGS_RELEASE "$ENV{CFLAGS} -O3 -Wall -std=c99 -Wno-implicit-function-declaration -Wno-pointer-sign")

SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -std=c++11 -O0 -Wall -g -ggdb")
SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -std=c++11 -O3 -Wall")

INCLUDE_DIRECTORIES("${PROJECT_BINARY_DIR}/include/")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/xsens/include")
INCLUDE_DIRECTORIES(${WIRINGPI_INCLUDE_DIRS})

LINK_DIRECTORIES("${PROJECT_SOURCE_DIR}/xsens/xcommunication")
LINK_DIRECTORIES("${PROJECT_SOURCE_DIR}/xsens/xstypes")

FIND_PACKAGE(WiringPi REQUIRED)
FIND_PACKAGE(Threads REQUIRED)
FIND_PACKAGE(UUID REQUIRED)

ADD_LIBRARY(helper STATIC "${CMAKE_SOURCE_DIR}/src/helper.c")
ADD_LIBRARY(aes STATIC "${CMAKE_SOURCE_DIR}/src/aes.c")
ADD_LIBRARY(deviceclass STATIC "${CMAKE_SOURCE_DIR}/src/deviceclass.cpp")
ADD_LIBRARY(lidar STATIC "${CMAKE_SOURCE_DIR}/src/lidar.c")
ADD_LIBRARY(raspi STATIC "${CMAKE_SOURCE_DIR}/src/raspi.c")
ADD_LIBRARY(repository STATIC "${CMAKE_SOURCE_DIR}/src/repository.c")
ADD_LIBRARY(serial STATIC "${CMAKE_SOURCE_DIR}/src/serial.c")
ADD_LIBRARY(xsens_api_wrapper STATIC "${CMAKE_SOURCE_DIR}/src/xsens_api_wrapper.cpp")
TARGET_LINK_LIBRARIES(xsens_api_wrapper deviceclass)
TARGET_LINK_LIBRARIES(xsens_api_wrapper xcommunication)
TARGET_LINK_LIBRARIES(xsens_api_wrapper xstypes)
ADD_LIBRARY(xsens STATIC "${CMAKE_SOURCE_DIR}/src/xsens.c")
TARGET_LINK_LIBRARIES(xsens xsens_api_wrapper)
ADD_EXECUTABLE(main "${CMAKE_SOURCE_DIR}/src/main.c")
TARGET_LINK_LIBRARIES(main helper)
TARGET_LINK_LIBRARIES(main aes)
TARGET_LINK_LIBRARIES(main deviceclass)
TARGET_LINK_LIBRARIES(main lidar)
TARGET_LINK_LIBRARIES(main raspi)
TARGET_LINK_LIBRARIES(main repository)
TARGET_LINK_LIBRARIES(main serial)
TARGET_LINK_LIBRARIES(main xsens_api_wrapper)
TARGET_LINK_LIBRARIES(main xsens)
TARGET_LINK_LIBRARIES(main ${WIRINGPI_LIBRARIES})
TARGET_LINK_LIBRARIES(main pthread)
TARGET_LINK_LIBRARIES(main uuid)

ADD_EXECUTABLE(mock_gps "${CMAKE_SOURCE_DIR}/src/mock_gps.c")
TARGET_LINK_LIBRARIES(mock_gps helper)
TARGET_LINK_LIBRARIES(mock_gps aes)
TARGET_LINK_LIBRARIES(mock_gps lidar)
TARGET_LINK_LIBRARIES(mock_gps raspi)
TARGET_LINK_LIBRARIES(mock_gps ${WIRINGPI_LIBRARIES})
TARGET_LINK_LIBRARIES(mock_gps pthread)
TARGET_LINK_LIBRARIES(mock_gps uuid)

FILE(COPY "${CMAKE_SOURCE_DIR}/src/test.ini" DESTINATION "${PROJECT_BINARY_DIR}")

INSTALL (TARGETS main DESTINATION bin)
INSTALL (FILES "${CMAKE_SOURCE_DIR}/src/test.ini" DESTINATION "${CMAKE_INSTALL_PREFIX}")
INCLUDE (InstallRequiredSystemLibraries)
set (CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
set (CPACK_RESOURCE_FILE_README "${CMAKE_CURRENT_SOURCE_DIR}/README.md")
set (CPACK_PACKAGE_VERSION_MAJOR "${LIDAR_VERSION_MAJOR}")
set (CPACK_PACKAGE_VERSION_MINOR "${LIDAR_VERSION_MINOR}")
INCLUDE (CPack)
